const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys') // don't need the .js for files

const User = mongoose.model('users'); //one argument retrieves from mongoose This is my model class 

passport.serializeUser((user,done) => {
  done(null, user.id); //place user.id in the cookie, it is not the profile id, it is a shortcut for user._id.$oid(automatically generated by mongodb)
  //Why not identify with googleID because a user might login with google, facebook, etc? may not have a google id but all of them will have an id with us.
});

passport.deserializeUser((id, done) => {
  User.findById(id)
    .then(user => {
      done(null, user);
    });
}); //Pulls is and turns it into a user

passport.use(new GoogleStrategy({
  clientID: keys.googleClientID,
  clientSecret: keys.googleClientSecret,
  callbackURL: '/auth/google/callback',//Where will the user be redirected after grating permission to our app
  proxy: true //Tells google strategy to truste the proxy (In our case heroku)
}, 
async (accessToken, refreshToken, profile, done) => { //access token is usde to indentify the user and make changes on his/her behalf on google, refresh token: the access tokenexpires so it extends the live of token , profile : we care about this
  const existingUser = await User.findOne({ googleId: profile.id })

    if (existingUser) {
      return done(null, existingUser); //done(error, userFound/userCreated)
    }

    const user = await new User({ googleId: profile.id }).save()
    done(null, user);
    

}));
